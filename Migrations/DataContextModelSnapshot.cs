// <auto-generated />
using System;
using GaragesStructure.DATA;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GaragesStructure.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BackEndStructuer.Entities.Dept", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Depts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a3757c5-07d9-4d03-9ac2-9f8732409343"),
                            CreationDate = new DateTime(2024, 6, 15, 19, 19, 17, 821, DateTimeKind.Utc).AddTicks(3072),
                            Deleted = false,
                            Name = "ali",
                            Value = 1000m
                        });
                });

            modelBuilder.Entity("BackEndStructuer.Entities.Drug", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("Barcode")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Dose")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Drugs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a9ea65ad-2990-4276-ac5f-51dcfab0bc61"),
                            Barcode = 0L,
                            CompanyId = new Guid("38b384fb-f194-4a60-b9ac-4f9cd350145c"),
                            CreationDate = new DateTime(2024, 6, 15, 19, 19, 17, 821, DateTimeKind.Utc).AddTicks(2897),
                            Deleted = false,
                            Description = "desc",
                            Dose = 1000,
                            Name = "any"
                        });
                });

            modelBuilder.Entity("BackEndStructuer.Entities.DrugPharmacy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CurrentQuantity")
                        .HasColumnType("integer");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("DrugId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("DrugId");

                    b.HasIndex("OrderId");

                    b.ToTable("DrugPharmacys");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bb4d3aa2-4613-40c3-a8c9-41a44d7a12c6"),
                            CreationDate = new DateTime(2024, 6, 15, 19, 19, 17, 821, DateTimeKind.Utc).AddTicks(2983),
                            CurrentQuantity = 0,
                            Deleted = false,
                            DrugId = new Guid("a9ea65ad-2990-4276-ac5f-51dcfab0bc61"),
                            ExpiryDate = new DateOnly(2024, 12, 12),
                            OrderId = new Guid("310c3b36-18b3-4fd5-b63b-9c1f7cef210d"),
                            Quantity = 100,
                            UnitPrice = 1000m
                        });
                });

            modelBuilder.Entity("BackEndStructuer.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PharmacyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("310c3b36-18b3-4fd5-b63b-9c1f7cef210d"),
                            CreationDate = new DateTime(2024, 6, 15, 19, 19, 17, 821, DateTimeKind.Utc).AddTicks(2953),
                            Deleted = false,
                            PharmacyId = new Guid("ba6169f2-2e5c-4612-8252-ebf65f134e4d"),
                            UserId = new Guid("22172dd7-6853-4427-8a9b-ee7fb466cf4e")
                        });
                });

            modelBuilder.Entity("BackEndStructuer.Entities.Pharmacy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Pharmacys");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ba6169f2-2e5c-4612-8252-ebf65f134e4d"),
                            CreationDate = new DateTime(2024, 6, 15, 19, 19, 17, 821, DateTimeKind.Utc).AddTicks(2701),
                            Deleted = false,
                            Name = "any"
                        });
                });

            modelBuilder.Entity("BackEndStructuer.Entities.Sell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("DeptId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("PharmacyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DeptId");

                    b.HasIndex("PharmacyId");

                    b.HasIndex("UserId");

                    b.ToTable("Sells");

                    b.HasData(
                        new
                        {
                            Id = new Guid("63954786-edde-4d70-8f75-a4bb1b6bd833"),
                            CreationDate = new DateTime(2024, 6, 15, 19, 19, 17, 821, DateTimeKind.Utc).AddTicks(3186),
                            Deleted = false,
                            DeptId = new Guid("1a3757c5-07d9-4d03-9ac2-9f8732409343"),
                            Discount = 1000m,
                            PharmacyId = new Guid("ba6169f2-2e5c-4612-8252-ebf65f134e4d"),
                            UserId = new Guid("22172dd7-6853-4427-8a9b-ee7fb466cf4e")
                        });
                });

            modelBuilder.Entity("BackEndStructuer.Entities.SellDrug", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("DrugPharmacyId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SellId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DrugPharmacyId");

                    b.HasIndex("SellId");

                    b.ToTable("SellDrugs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("99a921ae-8299-4750-92da-eed0dc3c4ff7"),
                            CreationDate = new DateTime(2024, 6, 15, 19, 19, 17, 821, DateTimeKind.Utc).AddTicks(3220),
                            Deleted = false,
                            DrugPharmacyId = new Guid("bb4d3aa2-4613-40c3-a8c9-41a44d7a12c6"),
                            Quantity = 100,
                            SellId = new Guid("63954786-edde-4d70-8f75-a4bb1b6bd833")
                        });
                });

            modelBuilder.Entity("GaragesStructure.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("22172dd7-6853-4427-8a9b-ee7fb466cf4e"),
                            CreationDate = new DateTime(2024, 6, 15, 19, 19, 17, 666, DateTimeKind.Utc).AddTicks(9484),
                            Deleted = false,
                            Email = "bbbeat114@gmail.com",
                            FullName = "super admin",
                            IsActive = true,
                            Password = "$2a$10$4NMX32vJQ4786ra5WlSvJ.uOQk2mZqiSdWgIKFoyrAMjekOPQ4z7a",
                            RoleId = new Guid("9a7614f0-89c6-43fd-9ea0-0ce931943c5c")
                        });
                });

            modelBuilder.Entity("GaragesStructure.Entities.Company.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Country")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Companys");

                    b.HasData(
                        new
                        {
                            Id = new Guid("38b384fb-f194-4a60-b9ac-4f9cd350145c"),
                            Country = 0,
                            CreationDate = new DateTime(2024, 6, 15, 19, 19, 17, 821, DateTimeKind.Utc).AddTicks(2796),
                            Deleted = false,
                            Name = "any"
                        });
                });

            modelBuilder.Entity("GaragesStructure.Entities.LoginLogger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Ip")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LoginLoggers");
                });

            modelBuilder.Entity("GaragesStructure.Entities.Notifications", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<int?>("NotificationDestination")
                        .HasColumnType("integer");

                    b.Property<int?>("NotifyFor")
                        .HasColumnType("integer");

                    b.Property<Guid>("NotifyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Picture")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("GaragesStructure.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6a345eeb-5a7f-4f5e-ac19-da9690657005"),
                            Action = "Super Admin",
                            CreationDate = new DateTime(2024, 6, 15, 19, 19, 17, 666, DateTimeKind.Utc).AddTicks(9438),
                            Deleted = false,
                            FullName = "super admin",
                            Subject = "super admin"
                        });
                });

            modelBuilder.Entity("GaragesStructure.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9a7614f0-89c6-43fd-9ea0-0ce931943c5c"),
                            CreationDate = new DateTime(2024, 6, 15, 19, 19, 17, 666, DateTimeKind.Utc).AddTicks(9253),
                            Deleted = false,
                            Name = "Super Admin"
                        });
                });

            modelBuilder.Entity("GaragesStructure.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("9a7614f0-89c6-43fd-9ea0-0ce931943c5c"),
                            PermissionId = new Guid("6a345eeb-5a7f-4f5e-ac19-da9690657005"),
                            CreationDate = new DateTime(2024, 6, 15, 19, 19, 17, 666, DateTimeKind.Utc).AddTicks(9462),
                            Deleted = false,
                            Id = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("GaragesStructure.Entities.UserPharmacy.UserPharmacy", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PharmacyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "PharmacyId");

                    b.HasIndex("PharmacyId");

                    b.ToTable("UserPharmacys");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("22172dd7-6853-4427-8a9b-ee7fb466cf4e"),
                            PharmacyId = new Guid("ba6169f2-2e5c-4612-8252-ebf65f134e4d"),
                            CreationDate = new DateTime(2024, 6, 15, 19, 19, 17, 821, DateTimeKind.Utc).AddTicks(2760),
                            Deleted = false,
                            Id = new Guid("2c75106a-a0e5-47bb-b5a1-41490648cbd0"),
                            Role = 0
                        });
                });

            modelBuilder.Entity("BackEndStructuer.Entities.Drug", b =>
                {
                    b.HasOne("GaragesStructure.Entities.Company.Company", "Company")
                        .WithMany("Drugs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("BackEndStructuer.Entities.DrugPharmacy", b =>
                {
                    b.HasOne("BackEndStructuer.Entities.Drug", "Drug")
                        .WithMany("DrugPharmacies")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndStructuer.Entities.Order", "Order")
                        .WithMany("DrugPharmacies")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BackEndStructuer.Entities.Order", b =>
                {
                    b.HasOne("BackEndStructuer.Entities.Pharmacy", "Pharmacy")
                        .WithMany("Orders")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GaragesStructure.Entities.AppUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pharmacy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackEndStructuer.Entities.Sell", b =>
                {
                    b.HasOne("BackEndStructuer.Entities.Dept", "Dept")
                        .WithMany("Sells")
                        .HasForeignKey("DeptId");

                    b.HasOne("BackEndStructuer.Entities.Pharmacy", "Pharmacy")
                        .WithMany("Sells")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GaragesStructure.Entities.AppUser", "User")
                        .WithMany("Sells")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dept");

                    b.Navigation("Pharmacy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackEndStructuer.Entities.SellDrug", b =>
                {
                    b.HasOne("BackEndStructuer.Entities.DrugPharmacy", "DrugPharmacy")
                        .WithMany("SellDrugs")
                        .HasForeignKey("DrugPharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndStructuer.Entities.Sell", "Sell")
                        .WithMany("SellDrugs")
                        .HasForeignKey("SellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrugPharmacy");

                    b.Navigation("Sell");
                });

            modelBuilder.Entity("GaragesStructure.Entities.AppUser", b =>
                {
                    b.HasOne("GaragesStructure.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("GaragesStructure.Entities.LoginLogger", b =>
                {
                    b.HasOne("GaragesStructure.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GaragesStructure.Entities.RolePermission", b =>
                {
                    b.HasOne("GaragesStructure.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GaragesStructure.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("GaragesStructure.Entities.UserPharmacy.UserPharmacy", b =>
                {
                    b.HasOne("BackEndStructuer.Entities.Pharmacy", "Pharmacy")
                        .WithMany("UserPharmacies")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GaragesStructure.Entities.AppUser", "User")
                        .WithMany("UserPharmacies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pharmacy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackEndStructuer.Entities.Dept", b =>
                {
                    b.Navigation("Sells");
                });

            modelBuilder.Entity("BackEndStructuer.Entities.Drug", b =>
                {
                    b.Navigation("DrugPharmacies");
                });

            modelBuilder.Entity("BackEndStructuer.Entities.DrugPharmacy", b =>
                {
                    b.Navigation("SellDrugs");
                });

            modelBuilder.Entity("BackEndStructuer.Entities.Order", b =>
                {
                    b.Navigation("DrugPharmacies");
                });

            modelBuilder.Entity("BackEndStructuer.Entities.Pharmacy", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Sells");

                    b.Navigation("UserPharmacies");
                });

            modelBuilder.Entity("BackEndStructuer.Entities.Sell", b =>
                {
                    b.Navigation("SellDrugs");
                });

            modelBuilder.Entity("GaragesStructure.Entities.AppUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Sells");

                    b.Navigation("UserPharmacies");
                });

            modelBuilder.Entity("GaragesStructure.Entities.Company.Company", b =>
                {
                    b.Navigation("Drugs");
                });

            modelBuilder.Entity("GaragesStructure.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("GaragesStructure.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
